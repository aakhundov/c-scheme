(compile '(begin  ; compile all define expressions below

; library functions

(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))

(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))

(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))

(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))

(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))

(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))

(define (caaaaar x) (car (car (car (car (car x))))))
(define (caaaadr x) (car (car (car (car (cdr x))))))
(define (caaadar x) (car (car (car (cdr (car x))))))
(define (caaaddr x) (car (car (car (cdr (cdr x))))))
(define (caadaar x) (car (car (cdr (car (car x))))))
(define (caadadr x) (car (car (cdr (car (cdr x))))))
(define (caaddar x) (car (car (cdr (cdr (car x))))))
(define (caadddr x) (car (car (cdr (cdr (cdr x))))))
(define (cadaaar x) (car (cdr (car (car (car x))))))
(define (cadaadr x) (car (cdr (car (car (cdr x))))))
(define (cadadar x) (car (cdr (car (cdr (car x))))))
(define (cadaddr x) (car (cdr (car (cdr (cdr x))))))
(define (caddaar x) (car (cdr (cdr (car (car x))))))
(define (caddadr x) (car (cdr (cdr (car (cdr x))))))
(define (cadddar x) (car (cdr (cdr (cdr (car x))))))
(define (caddddr x) (car (cdr (cdr (cdr (cdr x))))))

(define (cdaaaar x) (cdr (car (car (car (car x))))))
(define (cdaaadr x) (cdr (car (car (car (cdr x))))))
(define (cdaadar x) (cdr (car (car (cdr (car x))))))
(define (cdaaddr x) (cdr (car (car (cdr (cdr x))))))
(define (cdadaar x) (cdr (car (cdr (car (car x))))))
(define (cdadadr x) (cdr (car (cdr (car (cdr x))))))
(define (cdaddar x) (cdr (car (cdr (cdr (car x))))))
(define (cdadddr x) (cdr (car (cdr (cdr (cdr x))))))
(define (cddaaar x) (cdr (cdr (car (car (car x))))))
(define (cddaadr x) (cdr (cdr (car (car (cdr x))))))
(define (cddadar x) (cdr (cdr (car (cdr (car x))))))
(define (cddaddr x) (cdr (cdr (car (cdr (cdr x))))))
(define (cdddaar x) (cdr (cdr (cdr (car (car x))))))
(define (cdddadr x) (cdr (cdr (cdr (car (cdr x))))))
(define (cddddar x) (cdr (cdr (cdr (cdr (car x))))))
(define (cdddddr x) (cdr (cdr (cdr (cdr (cdr x))))))

(define (caaaaaar x) (car (car (car (car (car (car x)))))))
(define (caaaaadr x) (car (car (car (car (car (cdr x)))))))
(define (caaaadar x) (car (car (car (car (cdr (car x)))))))
(define (caaaaddr x) (car (car (car (car (cdr (cdr x)))))))
(define (caaadaar x) (car (car (car (cdr (car (car x)))))))
(define (caaadadr x) (car (car (car (cdr (car (cdr x)))))))
(define (caaaddar x) (car (car (car (cdr (cdr (car x)))))))
(define (caaadddr x) (car (car (car (cdr (cdr (cdr x)))))))
(define (caadaaar x) (car (car (cdr (car (car (car x)))))))
(define (caadaadr x) (car (car (cdr (car (car (cdr x)))))))
(define (caadadar x) (car (car (cdr (car (cdr (car x)))))))
(define (caadaddr x) (car (car (cdr (car (cdr (cdr x)))))))
(define (caaddaar x) (car (car (cdr (cdr (car (car x)))))))
(define (caaddadr x) (car (car (cdr (cdr (car (cdr x)))))))
(define (caadddar x) (car (car (cdr (cdr (cdr (car x)))))))
(define (caaddddr x) (car (car (cdr (cdr (cdr (cdr x)))))))
(define (cadaaaar x) (car (cdr (car (car (car (car x)))))))
(define (cadaaadr x) (car (cdr (car (car (car (cdr x)))))))
(define (cadaadar x) (car (cdr (car (car (cdr (car x)))))))
(define (cadaaddr x) (car (cdr (car (car (cdr (cdr x)))))))
(define (cadadaar x) (car (cdr (car (cdr (car (car x)))))))
(define (cadadadr x) (car (cdr (car (cdr (car (cdr x)))))))
(define (cadaddar x) (car (cdr (car (cdr (cdr (car x)))))))
(define (cadadddr x) (car (cdr (car (cdr (cdr (cdr x)))))))
(define (caddaaar x) (car (cdr (cdr (car (car (car x)))))))
(define (caddaadr x) (car (cdr (cdr (car (car (cdr x)))))))
(define (caddadar x) (car (cdr (cdr (car (cdr (car x)))))))
(define (caddaddr x) (car (cdr (cdr (car (cdr (cdr x)))))))
(define (cadddaar x) (car (cdr (cdr (cdr (car (car x)))))))
(define (cadddadr x) (car (cdr (cdr (cdr (car (cdr x)))))))
(define (caddddar x) (car (cdr (cdr (cdr (cdr (car x)))))))
(define (cadddddr x) (car (cdr (cdr (cdr (cdr (cdr x)))))))

(define (cdaaaaar x) (cdr (car (car (car (car (car x)))))))
(define (cdaaaadr x) (cdr (car (car (car (car (cdr x)))))))
(define (cdaaadar x) (cdr (car (car (car (cdr (car x)))))))
(define (cdaaaddr x) (cdr (car (car (car (cdr (cdr x)))))))
(define (cdaadaar x) (cdr (car (car (cdr (car (car x)))))))
(define (cdaadadr x) (cdr (car (car (cdr (car (cdr x)))))))
(define (cdaaddar x) (cdr (car (car (cdr (cdr (car x)))))))
(define (cdaadddr x) (cdr (car (car (cdr (cdr (cdr x)))))))
(define (cdadaaar x) (cdr (car (cdr (car (car (car x)))))))
(define (cdadaadr x) (cdr (car (cdr (car (car (cdr x)))))))
(define (cdadadar x) (cdr (car (cdr (car (cdr (car x)))))))
(define (cdadaddr x) (cdr (car (cdr (car (cdr (cdr x)))))))
(define (cdaddaar x) (cdr (car (cdr (cdr (car (car x)))))))
(define (cdaddadr x) (cdr (car (cdr (cdr (car (cdr x)))))))
(define (cdadddar x) (cdr (car (cdr (cdr (cdr (car x)))))))
(define (cdaddddr x) (cdr (car (cdr (cdr (cdr (cdr x)))))))
(define (cddaaaar x) (cdr (cdr (car (car (car (car x)))))))
(define (cddaaadr x) (cdr (cdr (car (car (car (cdr x)))))))
(define (cddaadar x) (cdr (cdr (car (car (cdr (car x)))))))
(define (cddaaddr x) (cdr (cdr (car (car (cdr (cdr x)))))))
(define (cddadaar x) (cdr (cdr (car (cdr (car (car x)))))))
(define (cddadadr x) (cdr (cdr (car (cdr (car (cdr x)))))))
(define (cddaddar x) (cdr (cdr (car (cdr (cdr (car x)))))))
(define (cddadddr x) (cdr (cdr (car (cdr (cdr (cdr x)))))))
(define (cdddaaar x) (cdr (cdr (cdr (car (car (car x)))))))
(define (cdddaadr x) (cdr (cdr (cdr (car (car (cdr x)))))))
(define (cdddadar x) (cdr (cdr (cdr (car (cdr (car x)))))))
(define (cdddaddr x) (cdr (cdr (cdr (car (cdr (cdr x)))))))
(define (cddddaar x) (cdr (cdr (cdr (cdr (car (car x)))))))
(define (cddddadr x) (cdr (cdr (cdr (cdr (car (cdr x)))))))
(define (cdddddar x) (cdr (cdr (cdr (cdr (cdr (car x)))))))
(define (cddddddr x) (cdr (cdr (cdr (cdr (cdr (cdr x)))))))

(define (first x) (car x))
(define (second x) (car (cdr x)))
(define (third x) (car (cdr (cdr x))))
(define (fourth x) (car (cdr (cdr (cdr x)))))
(define (fifth x) (car (cdr (cdr (cdr (cdr x))))))
(define (sixth x) (car (cdr (cdr (cdr (cdr (cdr x)))))))
(define (seventh x) (car (cdr (cdr (cdr (cdr (cdr (cdr x))))))))
(define (eighth x) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr x)))))))))
(define (ninth x) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr x))))))))))
(define (tenth x) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr x)))))))))))

(define (square x) (* x x))
(define (sqrt x) (expt x 0.5))
(define (cube x) (* x x x))
(define (inc n) (+ 1 n))
(define (identity x) x)
(define (average x y) (/ (+ x y) 2))
(define (positive? x) (> x 0))
(define (negative? x) (< x 0))

(define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))

(define (list-ref items n)
    (cond ((null? items) '())
          ((= n 0) (car items))
          (else (list-ref (cdr items) (- n 1)))))

(define (any? items)
    (cond ((null? items) false)
          ((true? (car items)) true)
          (else (any? (cdr items)))))

(define (all? items)
    (cond ((null? items) true)
          ((false? (car items)) false)
          (else (all? (cdr items)))))

(define (map-single f items)
    (define (iter rest tail)
        (if (null? rest)
            '()
            (let ((next (list (f (car rest)))))
                (set-cdr! tail next)
                (iter (cdr rest) next))))
    (let ((dummy (list '())))
        (iter items dummy)
        (cdr dummy)))

(define (map f first . rest)
    (define (iter lists tail)
        (if (any? (map-single null? lists))
            '()
            (let ((next (list (apply f (map-single car lists)))))
                (set-cdr! tail next)
                (iter (map-single cdr lists) next))))
    (if (null? rest)
        (map-single f first)
        (let ((dummy (list '())))
            (iter (cons first rest) dummy)
            (cdr dummy))))

(define (length items)
    (define (iter rest result)
        (if (null? rest)
            result
            (iter (cdr rest) (+ 1 result))))
    (iter items 0))

(define (append first . rest)
    (define (iter first rest tail)
        (cond ((null? rest) (set-cdr! tail first))
              ((null? first) (iter (car rest) (cdr rest) tail))
              (else (let ((next (list (car first))))
                        (set-cdr! tail next)
                        (iter (cdr first) rest next)))))
    (let ((dummy (list '())))
        (iter first rest dummy)
        (cdr dummy)))

(define (reverse items)
    (define (iter rest head)
        (if (null? rest)
            head
            (let ((new-head (list (car rest))))
                (set-cdr! new-head head)
                (iter (cdr rest) new-head))))
    (if (or (null? items) (null? (cdr items)))
        items
        (iter items '())))

; diagnostics tools

(define (assert-equals expression expected)
    (let ((result (eval expression)))
        (cond ((equal? result expected)
            (info "%s == %s" expression expected))  ; exactly equals
            ((and (number? expected)
                  (number? result)
                  (< (abs (- result expected)) 1e-4))
            (info "%s ~= %s" expression expected))  ; approximately equals
            (else (error "%s == %s, but %s was expected" expression result expected)))))

)) ; closing of the "(compile '(begin" expression
